"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create=False):
    # filenames can only contain lowercase letters and numbers
    for c in filename:
      if (ord(c) < 48 or (ord(c) > 57 and ord(c) < 97) or ord(c) > 123) and c not in ['.','-','_']:
        return
    if filename in ['.','..',''] or filename.startswith('.'):
      return
    # local (per object) reference to the underlying file
    self.file = filename
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    # remove previous AB files if exists
    if self.Afn in listfiles():
      removefile(self.Afn)
    # make the files and add 'SE' to the readat file...
    self.Afile = openfile(self.Afn, True)
    self.Bfile = openfile(self.Bfn, True)
    if self.Bfile.readat(None,0) == '':
      self.Afile.writeat('SE',0)
    else:
      self.Afile.writeat(self.Bfile.readat(None,0),0)


  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data,offset)
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)

  def close(self):
    A, B = self.Afile.readat(None,0), self.Bfile.readat(None,0)
    if len(B) != 0 and (A[0], A[-1], B[0], B[-1]) == ('S', 'E', 'S', 'E'):
      if self.file in listfiles():
        removefile(self.file)
      file = openfile(self.file,True)
      file.writeat(B,0)
      file.close()
      self.Afile.close()
      self.Bfile.close()
    else:
      self.Bfile.close()
      if self.Bfn in listfiles():
        removefile(self.Bfn)
      self.Afile.close()
      self.Bfile = openfile(self.Bfn, True)
      self.Bfile.writeat(A,0)
      self.Bfile.close()

def ABopenfile(filename, create=False):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()